/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg3.in.pkg1.kopikonverter;

/**
 *
 * @author DreamTeam
 */
public class Kopikonverter3in1 extends javax.swing.JFrame {

    /**
     * Creates new form Kopikonverter3in1
     */
    public Kopikonverter3in1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TypeConverter = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        CardPanel = new javax.swing.JPanel();
        TemperatureConverter = new javax.swing.JPanel();
        TemperatureBox1 = new javax.swing.JComboBox<>();
        TemperatureBox2 = new javax.swing.JComboBox<>();
        TempTextfield1 = new javax.swing.JTextField();
        TempTextfield2 = new javax.swing.JTextField();
        TempConvert = new javax.swing.JButton();
        TempClear = new javax.swing.JButton();
        TempExit = new javax.swing.JButton();
        LengthConverter = new javax.swing.JPanel();
        LengthBox1 = new javax.swing.JComboBox<>();
        LengthBox2 = new javax.swing.JComboBox<>();
        LengthTextfield1 = new javax.swing.JTextField();
        LengthTextfield2 = new javax.swing.JTextField();
        LengthConvert = new javax.swing.JButton();
        LengthClear = new javax.swing.JButton();
        LengthExit = new javax.swing.JButton();
        WeightConverter = new javax.swing.JPanel();
        WeightBox1 = new javax.swing.JComboBox<>();
        WeightBox2 = new javax.swing.JComboBox<>();
        WeightTextfield1 = new javax.swing.JTextField();
        WeightTextfield2 = new javax.swing.JTextField();
        WeightConvert = new javax.swing.JButton();
        WeightClear = new javax.swing.JButton();
        WeightExit = new javax.swing.JButton();
        Instruction = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        LengthExit1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 51, 0));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("3 in ONE");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 5, true));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Palatino Linotype", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("KOPIKONVERTER");
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 5, true));

        TypeConverter.setBackground(new java.awt.Color(255, 153, 0));
        TypeConverter.setFont(new java.awt.Font("Franklin Gothic Medium", 1, 14)); // NOI18N
        TypeConverter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Temperature", "Length", "Weight" }));
        TypeConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeConverterActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 204, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Help");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        CardPanel.setBackground(new java.awt.Color(204, 102, 0));
        CardPanel.setLayout(new java.awt.CardLayout());

        TemperatureConverter.setBackground(new java.awt.Color(204, 102, 0));

        TemperatureBox1.setBackground(new java.awt.Color(255, 153, 0));
        TemperatureBox1.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        TemperatureBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius", "Fahrenheit", "Kelvin" }));
        TemperatureBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TemperatureBox1jComboBox1ActionPerformed(evt);
            }
        });

        TemperatureBox2.setBackground(new java.awt.Color(255, 153, 0));
        TemperatureBox2.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        TemperatureBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius", "Fahrenheit", "Kelvin" }));

        TempTextfield2.setEditable(false);

        TempConvert.setBackground(new java.awt.Color(255, 255, 255));
        TempConvert.setText("Convert");
        TempConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TempConvertActionPerformed(evt);
            }
        });

        TempClear.setBackground(new java.awt.Color(255, 255, 255));
        TempClear.setText("Clear");
        TempClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TempClearActionPerformed(evt);
            }
        });

        TempExit.setBackground(new java.awt.Color(204, 0, 0));
        TempExit.setForeground(new java.awt.Color(255, 255, 255));
        TempExit.setText("Exit");
        TempExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TempExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TemperatureConverterLayout = new javax.swing.GroupLayout(TemperatureConverter);
        TemperatureConverter.setLayout(TemperatureConverterLayout);
        TemperatureConverterLayout.setHorizontalGroup(
            TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TemperatureConverterLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TemperatureConverterLayout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(TempExit))
                    .addGroup(TemperatureConverterLayout.createSequentialGroup()
                        .addGroup(TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TemperatureBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(TemperatureBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(TemperatureConverterLayout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(TempConvert)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TempClear))
                                .addComponent(TempTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(TempTextfield2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)))
                .addGap(18, 18, 18))
        );
        TemperatureConverterLayout.setVerticalGroup(
            TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TemperatureConverterLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TemperatureBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TempTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TempConvert)
                    .addComponent(TempClear))
                .addGap(22, 22, 22)
                .addGroup(TemperatureConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TempTextfield2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TemperatureBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(TempExit)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        CardPanel.add(TemperatureConverter, "Temperature");

        LengthConverter.setBackground(new java.awt.Color(219, 76, 0));

        LengthBox1.setBackground(new java.awt.Color(255, 153, 0));
        LengthBox1.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        LengthBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilometer", "Meter", "Centimeter", "Millimetre", "Micrometres", "Nanometre", "Mile", "Yard", "Foot", "Inch", "Nautical Mile" }));
        LengthBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LengthBox1jComboBox1ActionPerformed(evt);
            }
        });

        LengthBox2.setBackground(new java.awt.Color(255, 153, 0));
        LengthBox2.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        LengthBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilometer", "Meter", "Centimeter", "Millimetre", "Micrometres", "Nanometre", "Mile", "Yard", "Foot", "Inch", "Nautical Mile" }));

        LengthTextfield1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LengthTextfield1ActionPerformed(evt);
            }
        });

        LengthTextfield2.setEditable(false);

        LengthConvert.setBackground(new java.awt.Color(255, 255, 255));
        LengthConvert.setText("Convert");
        LengthConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LengthConvertActionPerformed(evt);
            }
        });

        LengthClear.setBackground(new java.awt.Color(255, 255, 255));
        LengthClear.setText("Clear");
        LengthClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LengthClearActionPerformed(evt);
            }
        });

        LengthExit.setBackground(new java.awt.Color(204, 0, 0));
        LengthExit.setForeground(new java.awt.Color(255, 255, 255));
        LengthExit.setText("Exit");
        LengthExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LengthExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LengthConverterLayout = new javax.swing.GroupLayout(LengthConverter);
        LengthConverter.setLayout(LengthConverterLayout);
        LengthConverterLayout.setHorizontalGroup(
            LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LengthConverterLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LengthConverterLayout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(LengthExit))
                    .addGroup(LengthConverterLayout.createSequentialGroup()
                        .addGroup(LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LengthBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LengthBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(LengthConverterLayout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(LengthConvert)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LengthClear))
                                .addComponent(LengthTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(LengthTextfield2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)))
                .addGap(21, 21, 21))
        );
        LengthConverterLayout.setVerticalGroup(
            LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LengthConverterLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LengthBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LengthTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LengthConvert)
                    .addComponent(LengthClear))
                .addGap(22, 22, 22)
                .addGroup(LengthConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LengthTextfield2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LengthBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(LengthExit)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        CardPanel.add(LengthConverter, "Length");

        WeightConverter.setBackground(new java.awt.Color(175, 79, 0));

        WeightBox1.setBackground(new java.awt.Color(255, 153, 0));
        WeightBox1.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        WeightBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ounces", "Kilograms", "Milligrams", "Pounds", "Ton(UK)", "Stone(UK)", "Carat", "Tonne", "Hundredweight(UK)", "Hundredweight(US)", "Grams", "Grains" }));
        WeightBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightBox1jComboBox1ActionPerformed(evt);
            }
        });

        WeightBox2.setBackground(new java.awt.Color(255, 153, 0));
        WeightBox2.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        WeightBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ounces", "Kilograms", "Milligrams", "Pounds", "Ton(UK)", "Stone(UK)", "Carat", "Tonne", "Hundredweight(UK)", "Hundredweight(US)", "Grams", "Grains" }));
        WeightBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightBox2ActionPerformed(evt);
            }
        });

        WeightTextfield1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightTextfield1ActionPerformed(evt);
            }
        });

        WeightTextfield2.setEditable(false);
        WeightTextfield2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightTextfield2ActionPerformed(evt);
            }
        });

        WeightConvert.setBackground(new java.awt.Color(255, 255, 255));
        WeightConvert.setText("Convert");
        WeightConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightConvertActionPerformed(evt);
            }
        });

        WeightClear.setBackground(new java.awt.Color(255, 255, 255));
        WeightClear.setText("Clear");
        WeightClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightClearActionPerformed(evt);
            }
        });

        WeightExit.setBackground(new java.awt.Color(204, 0, 0));
        WeightExit.setForeground(new java.awt.Color(255, 255, 255));
        WeightExit.setText("Exit");
        WeightExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout WeightConverterLayout = new javax.swing.GroupLayout(WeightConverter);
        WeightConverter.setLayout(WeightConverterLayout);
        WeightConverterLayout.setHorizontalGroup(
            WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeightConverterLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WeightConverterLayout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(WeightExit))
                    .addGroup(WeightConverterLayout.createSequentialGroup()
                        .addGroup(WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WeightBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(WeightBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(WeightConverterLayout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(WeightConvert)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(WeightClear))
                                .addComponent(WeightTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(WeightTextfield2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)))
                .addGap(20, 20, 20))
        );
        WeightConverterLayout.setVerticalGroup(
            WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WeightConverterLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeightBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WeightTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(WeightConvert)
                    .addComponent(WeightClear, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(WeightConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WeightTextfield2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WeightBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(WeightExit)
                .addGap(38, 38, 38))
        );

        CardPanel.add(WeightConverter, "Weight");

        Instruction.setBackground(new java.awt.Color(255, 204, 102));

        jList1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Instructions:", " ", "1. Please choose a measurement in the combo box on top", "2. Choose the unit of the number you want to convert", "3. Choose the unit to which you want to convert the number", "4. Input the number to the top text field and press convert button.", "5. To clear the text field press clear button.", "6. To exit press exit button on the bottom right" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        LengthExit1.setBackground(new java.awt.Color(204, 0, 0));
        LengthExit1.setForeground(new java.awt.Color(255, 255, 255));
        LengthExit1.setText("Exit");
        LengthExit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LengthExit1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InstructionLayout = new javax.swing.GroupLayout(Instruction);
        Instruction.setLayout(InstructionLayout);
        InstructionLayout.setHorizontalGroup(
            InstructionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InstructionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InstructionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                    .addGroup(InstructionLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(LengthExit1)))
                .addContainerGap())
        );
        InstructionLayout.setVerticalGroup(
            InstructionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InstructionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LengthExit1)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        CardPanel.add(Instruction, "card5");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(TypeConverter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(CardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(TypeConverter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TypeConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeConverterActionPerformed
        String Panel_1 = (String) TypeConverter.getSelectedItem();

        //Length
        switch (Panel_1) {
        //Weight
            case "Length":
                //removing Panel
                CardPanel.removeAll();
                CardPanel.repaint();
                CardPanel.revalidate();
                //adding Panel
                CardPanel.add(LengthConverter);
                CardPanel.repaint();
                CardPanel.revalidate();
                break;
        //Temperature
            case "Weight":
                //removing Panel
                CardPanel.removeAll();
                CardPanel.repaint();
                CardPanel.revalidate();
                //adding Panel
                CardPanel.add(WeightConverter);
                CardPanel.repaint();
                CardPanel.revalidate();
                break;
            case "Temperature":
                //removing Panel
                CardPanel.removeAll();
                CardPanel.repaint();
                CardPanel.revalidate();
                //adding Panel
                CardPanel.add(TemperatureConverter);
                CardPanel.repaint();
                CardPanel.revalidate();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_TypeConverterActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //removing Panel
        CardPanel.removeAll();
        CardPanel.repaint();
        CardPanel.revalidate();
        //adding Panel
        CardPanel.add(Instruction);
        CardPanel.repaint();
        CardPanel.revalidate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TemperatureBox1jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TemperatureBox1jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TemperatureBox1jComboBox1ActionPerformed

    private void TempConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TempConvertActionPerformed
        String tempbox1 = (String)TemperatureBox1.getSelectedItem();
        String tempbox2 = (String)TemperatureBox2.getSelectedItem();

 switch (tempbox1){        
//----------------------------------------------------------------------------------
//Celsius   
   case "Celsius":  
       switch(tempbox2){
//Celsius Celsius             
            case "Celsius":
                if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double c = Double.parseDouble(TempTextfield1.getText());
                TempTextfield2.setText(String.valueOf(c));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Celsius Fahrenheit
            case "Fahrenheit":
                if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double c = Double.parseDouble(TempTextfield1.getText());
                double f = (double)(c * 1.8 + 32);
                TempTextfield2.setText(String.valueOf(f));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Celsius Kelvin
            case "Kelvin":
                if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double c = Double.parseDouble(TempTextfield1.getText());
                double k = (double)(c + 273.15 );
                TempTextfield2.setText(String.valueOf(k));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
       }
break;
//----------------------------------------------------------------------------------
//Fahrenheit
case "Fahrenheit":  
       switch(tempbox2){
//Fahrenheit Fahrenheit
            case "Fahrenheit":
                if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double f = Double.parseDouble(TempTextfield1.getText());
                TempTextfield2.setText(String.valueOf(f));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;    
//Fahrenheit Celsius 
            case "Celsius":
                if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double f = Double.parseDouble(TempTextfield1.getText());
                double c = (double)((f - 32)*5/9);
                TempTextfield2.setText(String.valueOf(c));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Fahrenheit Kelvin  
           case "Kelvin":    
            if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double f = Double.parseDouble(TempTextfield1.getText());
                double k = (double)((f - 32)*5/9 + 273.15);
                TempTextfield2.setText(String.valueOf(k));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
       }
break;
//----------------------------------------------------------------------------------
//Kelvin
case "Kelvin": 
        switch(tempbox2){
//Kelvin Kelvin
            case "Kelvin":
                if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double k = Double.parseDouble(TempTextfield1.getText());
                TempTextfield2.setText(String.valueOf(k));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
                break;
//Kelvin Celsius
            case "Celsius":    
                if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double k = Double.parseDouble(TempTextfield1.getText());
                double c = (double)(0 - 273.15);
                TempTextfield2.setText(String.valueOf(c));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
                break;
//Kelvin Fahrenheit                
            case "Fahrenheit":        
                if (TempTextfield1.getText().matches("[0-9.1f]+")){
                double k = Double.parseDouble(TempTextfield1.getText());
                double f = (double)(0 - 273.15) * 9/5 +32;
                TempTextfield2.setText(String.valueOf(f));
            }
            else {
                TempTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
                break;
}
break;        
//--------------------------------------------------------------------------------------------        
}
    }//GEN-LAST:event_TempConvertActionPerformed

    private void TempClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TempClearActionPerformed
        TempTextfield1.setText("");
        TempTextfield2.setText("");
    }//GEN-LAST:event_TempClearActionPerformed

    private void TempExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TempExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_TempExitActionPerformed

    private void LengthBox1jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LengthBox1jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LengthBox1jComboBox1ActionPerformed

    private void LengthConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LengthConvertActionPerformed
String Length_input1 = (String)LengthBox1.getSelectedItem();
String Length_input2 = (String)LengthBox2.getSelectedItem();

switch (Length_input1){
//Kilometer
    case "Kilometer":
        
        switch (Length_input2){
//Kilometer Kilometer            
    case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Meter
    case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double m = (kilo*1000);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Centimeter
    case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double cm = (kilo*100000);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Millimetre
    case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double mm = (kilo*1000000);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Micrometres
    case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double micro = (kilo*1000000000);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Nanometre
    case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double nano = (kilo*10E11);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Mile
    case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double mile = (kilo*0.62137119223733);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Yard
    case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double yard = (kilo*1093.6132983377);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Foot
    case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double ft = (kilo*3280.8398950131);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Inch
     case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double inch = (kilo*39370.078740157 );
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Kilometer Nautical Mile  
    case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double kilo = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (kilo*0.53995680345572 );
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;    
}

break;
 //--------------------------------------------------------------------------------------------
//Meter
case "Meter":
     switch (Length_input2){           
//Meter Kilometer 
    case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (m*0.001 );
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
            break;
//Meter Meter
    case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Centimeter
    case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double cm = (m*100);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Millimetre
    case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double mm = (m*1000);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Micrometres
    case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double micro = (m*1000000);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Nanometre
    case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double nano = (m*1000000000);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Mile
    case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double mile = (m*0.00062137119223733);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Yard
    case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double yard = (m*1.0936132983377);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Foot
    case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double ft = (m*3.2808398950131);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Inch
    case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double inch = (m*39.370078740157);
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Meter Nautical Mile 
    case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double m = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (m*0.00053995680345572);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;     
//--------------------------------------------------------------------------------------------
//Centimeter
case "Centimeter":
     switch (Length_input2){    
//Centimeter Kilometer 
    case "Kilometer": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (cm*0.00001);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Meter
    case "Meter": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double m = (cm*0.01);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Centimeter
    case "Centimeter": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Millimetre
    case "Millimetre": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double mm = (cm*10);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Micrometres
    case "Micrometres": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double micro = (cm*10000);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Nanometre
    case "Nanometre": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double nano = (cm*10000000);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Mile
    case "Mile": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double mile = (cm*0.0000062137119223733);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Yard
    case "Yard": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double yard = (cm* 0.010936132983377);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Foot
    case "Foot": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double ft = (cm* 0.032808398950131);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Inch
    case "Inch": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double inch = (cm* 0.39370078740157);
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Centimeter Nautical Mile 
    case "Nautical Mile": 
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double cm = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (cm* 0.39370078740157);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Millimetre
case "Millimetre":
     switch (Length_input2){   
//Millimetre Kilometer
    case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (mm*0.000001);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Meter
    case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double m = (mm*0.001);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Centimeter
    case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double cm = (mm*0.1);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Millimetre
    case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Micrometres
    case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double micro = (mm*1000);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Nanometre
    case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double nano = (mm*1000000);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Mile
    case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double mile = (mm*6.2137119223733e-7);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Yard
    case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double yard = (mm* 0.0010936132983377);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Foot
    case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double ft = (mm* 0.0032808398950131);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Inch
    case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double inch = (mm* 0.039370078740157);
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Millimetre Nautical Mile
    case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mm = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (mm* 5.3995680345572e-7);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;     
 //--------------------------------------------------------------------------------------------
//Micrometres
case "Micrometres":
     switch (Length_input2){    
//Micrometres Kilometer
case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (micro*1e-9);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Micrometres Meter
case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double m = (micro*0.000001);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Micrometres Centimeter
case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double cm = (micro*0.0001);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Micrometres Millimetre
case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double mm = (micro*0.001);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Micrometres Micrometres
case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Micrometres Nanometre
case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double nano = (micro*1000);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Micrometres Mile
case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double mile = (micro*6.2137119223733e-10);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Micrometres Yard
case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double yard = (micro*0.0000010936132983377001);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Micrometres Foot
case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double ft = (micro*0.0000032808398950130998);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Micrometres Inch
case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double inch = (micro*0.000039370078740157);
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Micrometres Nautical Mile
case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double micro = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (micro*5.3995680345572e-10);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
     }
break;
 //--------------------------------------------------------------------------------------------
//Nanometre
case "Nanometre":
    switch (Length_input2){
//Nanometre Kilometer
    case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (nano*1e-12);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Nanometre Meter
    case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double m = (nano*1e-9);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nanometre Centimeter
    case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double cm = (nano*1e-7);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nanometre Millimetre
    case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double mm = (nano*0.000001);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nanometre Micrometres
    case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double micro = (nano*0.001);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nanometre Nanometre
    case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Nanometre Mile
    case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double mile = (nano*6.2137119223733e-13);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nanometre Yard
    case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double yard = (nano*1.0936132983377e-9);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nanometre Foot
    case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double ft = (nano*3.2808398950130997e-9);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nanometre Inch
    case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double inch = (nano*3.9370078740156996e-8);
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nanometre Nautical Mile
    case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nano = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (nano*5.3995680345572e-13);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Mile
case "Mile":
    switch (Length_input2){
//Mile Kilometer
    case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (mile*1.6093440000000103);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Mile Meter
    case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double m = (mile*1609.3440000000103);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;  
//Mile Centimeter
    case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double cm = (mile*160934.400000001);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Mile Millimetre
    case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double mm = (mile*1609344.0000000102);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Mile Micrometres
    case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double micro = (mile*1609344000.0000103);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Mile Nanometre
    case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double nano = (mile*1609344000000.0103);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Mile Mile
    case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Mile Yard
    case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double yard = (mile*1759.9999999999986);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;  
//Mile Foot
    case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double ft = (mile*5279.999999999995);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Mile Inch
    case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double inch = (mile*63359.99999999963);
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Mile Nautical Mile
    case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double mile = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (mile*0.8689762419006478);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
}
break;
 //--------------------------------------------------------------------------------------------
//Yard
case "Yard":
    switch (Length_input2){
//Yard Kilometer
    case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (yard*0.0009144000000000065);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Yard Meter
    case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double m = (yard*0.9144000000000064);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Yard Centimeter
    case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double cm = (yard*91.44000000000065);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Yard Millimetre
    case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double mm = (yard*914.4000000000065);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Yard Micrometres
    case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double micro = (yard*914400.0000000065);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Yard Nanometre
    case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double nano = (yard*914400000.0000064);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;     
//Yard Mile
    case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double mile = (yard* 0.0005681818181818186);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Yard Yard
    case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Yard Foot
    case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double ft = (yard*3);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Yard Inch
    case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double ft = (yard*35.999999999999815);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Yard Nautical Mile
    case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double yard = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (yard*0.0004937365010799138);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;   
}
break;
 //--------------------------------------------------------------------------------------------
//Foot
case "Foot":
    switch (Length_input2){
//Foot Kilometer
      case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (ft*0.0003048000000000022);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;  
//Foot Meter
      case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double m = (ft*0.3048000000000022);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;  
//Foot Centimeter
      case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double cm = (ft*30.480000000000217);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Foot Millimetre
       case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double mm = (ft*304.80000000000217);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Foot Micrometres
        case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double micro = (ft*304800.00000000215);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Foot Nanometre
        case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double nano = (ft*304800000.0000022);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Foot Mile
        case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double mile = (ft*0.00018939393939393953);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Foot Yard
        case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double yard = (ft*0.33333333333333337);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Foot Foot
        case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Foot Inch
        case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double inch = (ft*11.99999999999994);
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Foot Nautical Mile
        case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double ft = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (ft*0.00016457883369330463);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Inch
case "Inch":
    switch (Length_input2){
//Inch Kilometer
        case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (inch*0.000025400000000000312);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Meter
        case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double m = (inch*0.02540000000000031);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Centimeter
        case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double cm = (inch*2.540000000000031);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Millimetre
        case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double mm = (inch*25.40000000000031);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Micrometres
        case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double micro = (inch*25400.00000000031);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Nanometre
        case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double nano = (inch*25400000.00000031);
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Mile
        case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double mile = (inch*0.000015782828282828374);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Yard
        case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double yard = (inch*0.027777777777777922);
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Foot
        case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double ft = (inch*0.08333333333333376);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Inch
        case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Inch Nautical Mile
        case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double inch = Double.parseDouble(LengthTextfield1.getText());
                double nautical_mile = (inch*0.000013714902807775456);
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Nautical Mile
case "Nautical Mile":
    switch (Length_input2){
//Nautical Mile Kilometer
        case "Kilometer":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double kilo = (nautical_mile*1.8520000000000123);
                LengthTextfield2.setText(String.valueOf(kilo));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Nautical Mile Meter
        case "Meter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double m = (nautical_mile*1852.000000000012);
                LengthTextfield2.setText(String.valueOf(m));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Nautical Mile Centimeter
        case "Centimeter":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double cm = (nautical_mile*185200.00000000122);
                LengthTextfield2.setText(String.valueOf(cm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nautical Mile Millimetre
        case "Millimetre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double mm = (nautical_mile*1852000.000000012);
                LengthTextfield2.setText(String.valueOf(mm));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nautical Mile Micrometres
        case "Micrometres":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double micro = (nautical_mile*1852000000.0000122);
                LengthTextfield2.setText(String.valueOf(micro));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nautical Mile Nanometre
        case "Nanometre":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double nano = (nautical_mile*1852000000000.0122 );
                LengthTextfield2.setText(String.valueOf(nano));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nautical Mile Mile
        case "Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double mile = (nautical_mile*1.1507794480235427);
                LengthTextfield2.setText(String.valueOf(mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nautical Mile Yard
        case "Yard":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double yard = (nautical_mile*2025.3718285214338 );
                LengthTextfield2.setText(String.valueOf(yard));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nautical Mile Foot
        case "Foot":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double ft = (nautical_mile*6076.115485564301);
                LengthTextfield2.setText(String.valueOf(ft));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nautical Mile Inch
        case "Inch":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                double inch = (nautical_mile*72913.38582677123);
                LengthTextfield2.setText(String.valueOf(inch));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Nautical Mile Nautical Mile
        case "Nautical Mile":
        if (LengthTextfield1.getText().matches("[0-9.1f]+")){
                double nautical_mile = Double.parseDouble(LengthTextfield1.getText());
                LengthTextfield2.setText(String.valueOf(nautical_mile));
            }
            else {
                LengthTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
}
    }//GEN-LAST:event_LengthConvertActionPerformed

    private void LengthClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LengthClearActionPerformed
        LengthTextfield1.setText("");
        LengthTextfield2.setText("");
    }//GEN-LAST:event_LengthClearActionPerformed

    private void LengthExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LengthExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_LengthExitActionPerformed

    private void WeightBox1jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightBox1jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeightBox1jComboBox1ActionPerformed

    private void WeightBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeightBox2ActionPerformed

    private void WeightTextfield1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightTextfield1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeightTextfield1ActionPerformed

    private void WeightTextfield2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightTextfield2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeightTextfield2ActionPerformed

    private void WeightConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightConvertActionPerformed
String Weight_input1 = (String)WeightBox1.getSelectedItem();
String Weight_input2 = (String)WeightBox2.getSelectedItem();

switch (Weight_input1){
//Ounces
    case "Ounces":
    switch (Weight_input2){        
//Ounces Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double kg = (oz*0.0283495231);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double mg = (oz*28349.523125);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (oz*0.0625);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (oz*0.0000279018);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (oz*0.0044642857);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double carat = (oz*141.74761563);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (oz*0.0000283495);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (oz*0.0005580357142857148);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (oz*0.0006250000000000142);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double g = (oz*28.34952312500033);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ounces Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double oz = Double.parseDouble(WeightTextfield1.getText());
                double gr = (oz*437.49999999999295);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Kilograms
case "Kilograms":
    switch (Weight_input2){
//Kilograms Ounces
    case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double oz = (kg*35.27396194958);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Kilograms Kilograms
    case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double mg = (kg*1000000);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Kilograms Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (kg*2.2046226218488);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (kg*0.00098420652761106);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (kg*0.15747304441777);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double carat = (kg*5000);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (kg*0.001);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (kg*0.019684130552221);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (kg*0.022046226218488);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double g = (kg*1000);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Kilograms Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double kg = Double.parseDouble(WeightTextfield1.getText());
                double gr = (kg*15432.358352941);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Milligrams
case "Milligrams":
    switch (Weight_input2){
//Milligrams Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double oz = (mg*0.000035273961949579995);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double kg = (mg*0.000001);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (mg*0.0000022046226218488);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (mg*9.8420652761106e-10);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (mg*1.5747304441777e-7);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double carat = (mg*0.005);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (mg*1e-9);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (mg*1.9684130552221e-8);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (mg*2.2046226218488e-8);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double g = (mg*0.001);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Milligrams Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double mg = Double.parseDouble(WeightTextfield1.getText());
                double gr = (mg*0.015432358352941001);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;   
 //--------------------------------------------------------------------------------------------
//Pounds
case "Pounds":
    switch (Weight_input2){
//Pounds Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double oz = (lbs*15.999999999999636);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double kg = (lbs*0.453592369999995);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double mg = (lbs*453592.369999995);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (lbs*0.0004464285714285662);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (lbs*0.07142857142857077);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double carat = (lbs*2267.961849999975);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (lbs*0.000453592369999995);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (lbs*0.008928571428571234);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (lbs*0.01);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double g = (lbs*453.592369999995);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Pounds Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double lbs = Double.parseDouble(WeightTextfield1.getText());
                double gr = (lbs*6999.999999999728);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
    }    
break;
 //--------------------------------------------------------------------------------------------
//Ton(UK)
case "Ton(UK)":
    switch (Weight_input2){
//Ton(UK) Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double oz = (ton_uk*35839.99999999961);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double kg = (ton_uk*1016.0469088000007);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double mg = (ton_uk*1016046908.8000007);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (ton_uk*2240.0000000000264);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (ton_uk*160.0000000000004);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double carat = (ton_uk*5080234.5440000035);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (ton_uk*1.0160469088000008);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (ton_uk*19.999999999999797);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (ton_uk*22.40000000000026);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double g = (ton_uk*1016046.9088000007);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Ton(UK) Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double ton_uk = Double.parseDouble(WeightTextfield1.getText());
                double gr = (ton_uk*15679999.999999573);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
    }
break;
 //--------------------------------------------------------------------------------------------
//Stone(UK)
case "Stone(UK)":
    switch (Weight_input2){
//Stone(UK) Ounces
       case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double oz = (stone_uk*223.99999999999696);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Stone(UK) Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double kg = (stone_uk*6.350293179999988);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double mg = (stone_uk*6350293.1799999885);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (stone_uk*14.000000000000128);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (stone_uk*0.006249999999999984);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double carat = (stone_uk*31751.46589999994);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (stone_uk*0.006350293179999989);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (stone_uk*0.12499999999999842);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (stone_uk*0.1400000000000013);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double g = (stone_uk*6350.293179999988);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Stone(UK) Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double stone_uk = Double.parseDouble(WeightTextfield1.getText());
                double gr = (stone_uk*97999.99999999709);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
    }
break;   
 //--------------------------------------------------------------------------------------------
//Carat
case "Carat":
    switch (Weight_input2){
//Carat Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double oz = (carat*0.0070547923899159995);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double kg = (carat*0.0002);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double mg = (carat* 200);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (carat* 0.00044092452436976);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (carat* 1.96841305522212e-7);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (carat* 0.000031494608883553996);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (carat* 2e-7);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (carat* 0.0000039368261104441995);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (carat* 0.0000044092452436976);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double g = (carat* 0.2);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Carat Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double carat = Double.parseDouble(WeightTextfield1.getText());
                double gr = (carat* 3.0864716705882);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Tonne
case "Tonne":
    switch (Weight_input2){
//Tonne Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double oz = (tonne*35273.96194958);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double kg = (tonne*1000);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double mg = (tonne*1000000000);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (tonne*2204.6226218488);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (tonne*0.9842065276110599);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (tonne*157.47304441776998);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double carat = (tonne*5000000);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (tonne*19.684130552221);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (tonne*22.046226218488002);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double g = (tonne*1000000);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Tonne Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double tonne = Double.parseDouble(WeightTextfield1.getText());
                double gr = (tonne*15432358.352941);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;  
}
break;
 //--------------------------------------------------------------------------------------------
//Hundredweight(UK)
case "Hundredweight(UK)":
    switch (Weight_input2){
//Hundredweight(UK) Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double oz = (hweight_uk*1791.9999999999984);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double kg = (hweight_uk*50.80234544000055);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double mg = (hweight_uk*50802345.44000055);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (hweight_uk*112.00000000000244 );
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (hweight_uk*0.05000000000000051);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (hweight_uk*8.000000000000101);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double carat = (hweight_uk*254011.72720000276);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (hweight_uk*0.05080234544000055);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (hweight_uk*1.1200000000000245);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double g = (hweight_uk*50802.34544000055);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(UK) Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_uk = Double.parseDouble(WeightTextfield1.getText());
                double gr = (hweight_uk*783999.9999999866 );
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;      
}
break;
 //--------------------------------------------------------------------------------------------
//Hundredweight(US)
case "Hundredweight(US)":
    switch (Weight_input2){
//Hundredweight(US) Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double oz = (hweight_us*1599.9999999999636);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;    
//Hundredweight(US) Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double kg = (hweight_us*45.3592369999995);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double mg = (hweight_us*45359236.9999995);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (hweight_us*100);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (hweight_us*0.04464285714285662);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (hweight_us*7.1428571428570775);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double carat = (hweight_us*226796.1849999975);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (hweight_us*0.045359236999999504);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (hweight_us*0.8928571428571234);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double g = (hweight_us*45359.2369999995 );
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Hundredweight(US) Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double hweight_us = Double.parseDouble(WeightTextfield1.getText());
                double gr = (hweight_us*699999.9999999728);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Grams
case "Grams":
    switch (Weight_input2){
//Grams Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double oz = (g*0.03527396194958);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;        
//Grams Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double kg = (g*0.001);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Grams Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double mg = (g*1000);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (g*0.0022046226218488);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (g*9.842065276110598e-7);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (g*0.00015747304441777);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double carat = (g*5);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (g*0.000001);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (g*0.000019684130552220998);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (g*0.000022046226218488002);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grams Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double g = Double.parseDouble(WeightTextfield1.getText());
                double gr = (g*15.432358352941002);
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
 //--------------------------------------------------------------------------------------------
//Grains
case "Grains":
    switch (Weight_input2){
//Grains Ounces
        case "Ounces":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double oz = (gr*0.0022857142857143227);
                WeightTextfield2.setText(String.valueOf(oz));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break; 
//Grains Kilograms
        case "Kilograms":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double kg = (gr*0.00006479891000000181);
                WeightTextfield2.setText(String.valueOf(kg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Milligrams
        case "Milligrams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double mg = (gr*64.79891000000181);
                WeightTextfield2.setText(String.valueOf(mg));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Pounds
        case "Pounds":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double lbs = (gr*0.0001428571428571484);
                WeightTextfield2.setText(String.valueOf(lbs));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Ton(UK)
        case "Ton(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double ton_uk = (gr*6.377551020408336e-8);
                WeightTextfield2.setText(String.valueOf(ton_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Stone(UK)
        case "Stone(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double stone_uk = (gr*0.000010204081632653365);
                WeightTextfield2.setText(String.valueOf(stone_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Carat
        case "Carat":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double carat = (gr*0.32399455000000904);
                WeightTextfield2.setText(String.valueOf(carat));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Tonne
        case "Tonne":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double tonne = (gr*6.47989100000018e-8);
                WeightTextfield2.setText(String.valueOf(tonne));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Hundredweight(UK)
        case "Hundredweight(UK)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double hweight_uk = (gr*0.0000012755102040816543);
                WeightTextfield2.setText(String.valueOf(hweight_uk));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Hundredweight(US)
        case "Hundredweight(US)":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double hweight_us = (gr*0.0000014285714285714841);
                WeightTextfield2.setText(String.valueOf(hweight_us));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Grams
        case "Grams":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                double g = (gr*0.0647989100000018);
                WeightTextfield2.setText(String.valueOf(g));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
//Grains Grains
        case "Grains":
        if (WeightTextfield1.getText().matches("[0-9.1f]+")){
                double gr = Double.parseDouble(WeightTextfield1.getText());
                WeightTextfield2.setText(String.valueOf(gr));
            }
            else {
                WeightTextfield2.setText("ONLY NUMBERS ARE VALID");
            }
        break;
}
break;
}
    }//GEN-LAST:event_WeightConvertActionPerformed

    private void WeightClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightClearActionPerformed
        WeightTextfield1.setText("");
        WeightTextfield2.setText("");
    }//GEN-LAST:event_WeightClearActionPerformed

    private void WeightExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_WeightExitActionPerformed

    private void LengthTextfield1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LengthTextfield1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LengthTextfield1ActionPerformed

    private void LengthExit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LengthExit1ActionPerformed
System.exit(0);        
    }//GEN-LAST:event_LengthExit1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Kopikonverter3in1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Kopikonverter3in1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Kopikonverter3in1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Kopikonverter3in1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Kopikonverter3in1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CardPanel;
    private javax.swing.JPanel Instruction;
    private javax.swing.JComboBox<String> LengthBox1;
    private javax.swing.JComboBox<String> LengthBox2;
    private javax.swing.JButton LengthClear;
    private javax.swing.JButton LengthConvert;
    private javax.swing.JPanel LengthConverter;
    private javax.swing.JButton LengthExit;
    private javax.swing.JButton LengthExit1;
    private javax.swing.JTextField LengthTextfield1;
    private javax.swing.JTextField LengthTextfield2;
    private javax.swing.JButton TempClear;
    private javax.swing.JButton TempConvert;
    private javax.swing.JButton TempExit;
    private javax.swing.JTextField TempTextfield1;
    private javax.swing.JTextField TempTextfield2;
    private javax.swing.JComboBox<String> TemperatureBox1;
    private javax.swing.JComboBox<String> TemperatureBox2;
    private javax.swing.JPanel TemperatureConverter;
    private javax.swing.JComboBox<String> TypeConverter;
    private javax.swing.JComboBox<String> WeightBox1;
    private javax.swing.JComboBox<String> WeightBox2;
    private javax.swing.JButton WeightClear;
    private javax.swing.JButton WeightConvert;
    private javax.swing.JPanel WeightConverter;
    private javax.swing.JButton WeightExit;
    private javax.swing.JTextField WeightTextfield1;
    private javax.swing.JTextField WeightTextfield2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
